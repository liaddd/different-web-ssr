"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_1 = require("cloudform/types/dynamoDb/table");
var resolver_1 = require("cloudform/types/appSync/resolver");
var cloudform_1 = require("cloudform");
var graphql_mapping_template_1 = require("graphql-mapping-template");
var graphql_transformer_common_1 = require("graphql-transformer-common");
var graphql_transformer_core_1 = require("graphql-transformer-core");
var ResourceFactory = /** @class */ (function () {
    function ResourceFactory() {
    }
    ResourceFactory.prototype.makeParams = function () {
        return {};
    };
    /**
     * Creates the barebones template for an application.
     */
    ResourceFactory.prototype.initTemplate = function () {
        return {
            Parameters: this.makeParams(),
            Resources: {},
            Outputs: {}
        };
    };
    /**
     * Add a GSI for the connection if one does not already exist.
     * @param table The table to add the GSI to.
     */
    ResourceFactory.prototype.updateTableForConnection = function (table, connectionName, connectionAttributeName, sortField) {
        if (sortField === void 0) { sortField = null; }
        var gsis = table.Properties.GlobalSecondaryIndexes || [];
        if (gsis.length >= 5) {
            throw new graphql_transformer_core_1.InvalidDirectiveError("Cannot create connection " + connectionName + ". Table " + table.Properties.TableName + " out of GSI capacity.");
        }
        var connectionGSIName = "gsi-" + connectionName;
        // If the GSI does not exist yet then add it.
        var existingGSI = gsis.find(function (gsi) { return gsi.IndexName === connectionGSIName; });
        if (!existingGSI) {
            var keySchema = [new table_1.KeySchema({ AttributeName: connectionAttributeName, KeyType: 'HASH' })];
            if (sortField) {
                keySchema.push(new table_1.KeySchema({ AttributeName: sortField.name, KeyType: 'RANGE' }));
            }
            gsis.push(new table_1.GlobalSecondaryIndex({
                IndexName: connectionGSIName,
                KeySchema: keySchema,
                Projection: new table_1.Projection({
                    ProjectionType: 'ALL'
                }),
                ProvisionedThroughput: new table_1.ProvisionedThroughput({
                    ReadCapacityUnits: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
                    WriteCapacityUnits: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS)
                }),
            }));
        }
        // If the attribute definition does not exist yet, add it.
        var attributeDefinitions = table.Properties.AttributeDefinitions;
        var existingAttribute = attributeDefinitions.find(function (attr) { return attr.AttributeName === connectionAttributeName; });
        if (!existingAttribute) {
            attributeDefinitions.push(new table_1.AttributeDefinition({
                AttributeName: connectionAttributeName,
                AttributeType: 'S'
            }));
        }
        // If the attribute definition does not exist yet, add it.
        if (sortField) {
            var existingSortAttribute = attributeDefinitions.find(function (attr) { return attr.AttributeName === sortField.name; });
            if (!existingSortAttribute) {
                var scalarType = graphql_transformer_common_1.DEFAULT_SCALARS[sortField.type];
                var attributeType = scalarType === 'String' ? 'S' : 'N';
                attributeDefinitions.push(new table_1.AttributeDefinition({ AttributeName: sortField.name, AttributeType: attributeType }));
            }
        }
        table.Properties.GlobalSecondaryIndexes = gsis;
        table.Properties.AttributeDefinitions = attributeDefinitions;
        return table;
    };
    /**
     * Create a get item resolver for singular connections.
     * @param type The parent type name.
     * @param field The connection field name.
     * @param relatedType The name of the related type to fetch from.
     * @param connectionAttribute The name of the underlying attribute containing the id.
     */
    ResourceFactory.prototype.makeGetItemConnectionResolver = function (type, field, relatedType, connectionAttribute) {
        return new resolver_1.default({
            ApiId: cloudform_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            DataSourceName: cloudform_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(relatedType), 'Name'),
            FieldName: field,
            TypeName: type,
            RequestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.DynamoDBMappingTemplate.getItem({
                key: graphql_mapping_template_1.obj({
                    id: graphql_mapping_template_1.ref("util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source." + connectionAttribute + ", \"" + graphql_transformer_common_1.NONE_VALUE + "\"))")
                })
            })),
            ResponseMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.ref('util.toJson($context.result)'))
        }).dependsOn(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLSchemaLogicalID);
    };
    /**
     * Create a resolver that queries an item in DynamoDB.
     * @param type
     */
    ResourceFactory.prototype.makeQueryConnectionResolver = function (type, field, relatedType, connectionAttribute, connectionName) {
        var defaultPageLimit = 10;
        return new resolver_1.default({
            ApiId: cloudform_1.Fn.GetAtt(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLAPILogicalID, 'ApiId'),
            DataSourceName: cloudform_1.Fn.GetAtt(graphql_transformer_common_1.ModelResourceIDs.ModelTableDataSourceID(relatedType), 'Name'),
            FieldName: field,
            TypeName: type,
            RequestMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('limit'), graphql_mapping_template_1.ref("util.defaultIfNull($context.args.limit, " + defaultPageLimit + ")")),
                graphql_mapping_template_1.DynamoDBMappingTemplate.query({
                    query: graphql_mapping_template_1.obj({
                        'expression': graphql_mapping_template_1.str('#connectionAttribute = :connectionAttribute'),
                        'expressionNames': graphql_mapping_template_1.obj({
                            '#connectionAttribute': graphql_mapping_template_1.str(connectionAttribute)
                        }),
                        'expressionValues': graphql_mapping_template_1.obj({
                            ':connectionAttribute': graphql_mapping_template_1.obj({
                                'S': graphql_mapping_template_1.str('$context.source.id')
                            })
                        })
                    }),
                    scanIndexForward: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.sortDirection'), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('context.args.sortDirection'), graphql_mapping_template_1.str('ASC')), graphql_mapping_template_1.bool(true), graphql_mapping_template_1.bool(false)), graphql_mapping_template_1.bool(true)),
                    filter: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.filter'), graphql_mapping_template_1.ref('util.transform.toDynamoDBFilterExpression($ctx.args.filter)'), graphql_mapping_template_1.nul()),
                    limit: graphql_mapping_template_1.ref('limit'),
                    nextToken: graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('context.args.nextToken'), graphql_mapping_template_1.str('$context.args.nextToken'), graphql_mapping_template_1.nul()),
                    index: graphql_mapping_template_1.str("gsi-" + connectionName)
                })
            ])),
            ResponseMappingTemplate: graphql_mapping_template_1.print(graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('!$result'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('result'), graphql_mapping_template_1.ref('ctx.result'))),
                graphql_mapping_template_1.raw('$util.toJson($result)')
            ]))
        }).dependsOn(graphql_transformer_common_1.ResourceConstants.RESOURCES.GraphQLSchemaLogicalID);
    };
    return ResourceFactory;
}());
exports.ResourceFactory = ResourceFactory;
//# sourceMappingURL=resources.js.map