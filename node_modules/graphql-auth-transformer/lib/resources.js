"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cognito_1 = require("cloudform/types/cognito");
var graphQlApi_1 = require("cloudform/types/appSync/graphQlApi");
var cloudform_1 = require("cloudform");
var graphql_mapping_template_1 = require("graphql-mapping-template");
var graphql_transformer_common_1 = require("graphql-transformer-common");
var constants_1 = require("./constants");
var NONE_VALUE = '___xamznone____';
function replaceIfUsername(identityField) {
    return (identityField === 'username') ? 'cognito:username' : identityField;
}
function isUsername(identityField) {
    return identityField === 'username';
}
var ResourceFactory = /** @class */ (function () {
    function ResourceFactory() {
    }
    ResourceFactory.prototype.makeParams = function () {
        var _a;
        return _a = {},
            _a[graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId] = new cloudform_1.StringParameter({
                Description: 'The id of an existing User Pool to connect. If this is changed, a user pool will not be created for you.',
                Default: graphql_transformer_common_1.ResourceConstants.NONE
            }),
            _a[graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolName] = new cloudform_1.StringParameter({
                Description: 'The name of the user pool.',
                Default: 'AppSyncUserPool'
            }),
            _a[graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolMobileClientName] = new cloudform_1.StringParameter({
                Description: 'The name of the native user pool client.',
                Default: 'CognitoNativeClient'
            }),
            _a[graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolJSClientName] = new cloudform_1.StringParameter({
                Description: 'The name of the web user pool client.',
                Default: 'CognitoJSClient'
            }),
            _a[graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolRefreshTokenValidity] = new cloudform_1.NumberParameter({
                Description: 'The time limit, in days, after which the refresh token is no longer valid.',
                Default: 30
            }),
            _a;
    };
    /**
     * Creates the barebones template for an application.
     */
    ResourceFactory.prototype.initTemplate = function () {
        var _a, _b, _c;
        return {
            Parameters: this.makeParams(),
            Resources: (_a = {},
                _a[graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolLogicalID] = this.makeUserPool(),
                _a[graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolNativeClientLogicalID] = this.makeUserPoolNativeClient(),
                _a[graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolJSClientLogicalID] = this.makeUserPoolJSClient(),
                _a),
            Outputs: (_b = {},
                _b[graphql_transformer_common_1.ResourceConstants.OUTPUTS.AuthCognitoUserPoolNativeClientOutput] = this.makeNativeClientOutput(),
                _b[graphql_transformer_common_1.ResourceConstants.OUTPUTS.AuthCognitoUserPoolJSClientOutput] = this.makeJSClientOutput(),
                _b[graphql_transformer_common_1.ResourceConstants.OUTPUTS.AuthCognitoUserPoolIdOutput] = this.makeUserPoolOutput(),
                _b),
            Conditions: (_c = {},
                _c[graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool] = this.makeShouldCreateUserPoolCondition(),
                _c)
        };
    };
    /**
     * Conditions
     */
    ResourceFactory.prototype.makeShouldCreateUserPoolCondition = function () {
        return cloudform_1.Fn.Equals(cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId), graphql_transformer_common_1.ResourceConstants.NONE);
    };
    /**
     * Outputs
     */
    ResourceFactory.prototype.makeNativeClientOutput = function () {
        return {
            Description: "Amazon Cognito UserPools native client ID",
            Value: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolNativeClientLogicalID), cloudform_1.Fn.Join(" ", ["See UserPool:", cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)])),
            Export: {
                Name: cloudform_1.Fn.Join(':', [cloudform_1.Refs.StackName, "CognitoNativeClient"])
            }
        };
    };
    ResourceFactory.prototype.makeJSClientOutput = function () {
        return {
            Description: "Amazon Cognito UserPools JS client ID",
            Value: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolJSClientLogicalID), cloudform_1.Fn.Join(" ", ["See UserPool:", cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)])),
            Export: {
                Name: cloudform_1.Fn.Join(':', [cloudform_1.Refs.StackName, "CognitoJSClient"])
            }
        };
    };
    ResourceFactory.prototype.makeUserPoolOutput = function () {
        return {
            Description: "Amazon Cognito UserPool id",
            Value: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolLogicalID), cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)),
            Export: {
                Name: cloudform_1.Fn.Join(':', [cloudform_1.Refs.StackName, "CognitoUserPoolId"])
            }
        };
    };
    ResourceFactory.prototype.updateGraphQLAPIWithAuth = function (apiRecord) {
        return new graphQlApi_1.default(__assign({}, apiRecord.Properties, { Name: apiRecord.Properties.Name, AuthenticationType: 'AMAZON_COGNITO_USER_POOLS', UserPoolConfig: new graphQlApi_1.UserPoolConfig({
                UserPoolId: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolLogicalID), cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)),
                AwsRegion: cloudform_1.Refs.Region,
                DefaultAction: 'ALLOW'
            }) }));
    };
    ResourceFactory.prototype.makeUserPool = function () {
        return new cognito_1.default.UserPool({
            UserPoolName: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolName),
            Policies: {
                // TODO: Parameterize these as mappings so you have loose, medium, and strict options.
                PasswordPolicy: {
                    MinimumLength: 8,
                    RequireLowercase: true,
                    RequireNumbers: true,
                    RequireSymbols: true,
                    RequireUppercase: true
                }
            },
            Schema: [
                {
                    Name: 'email',
                    Required: true,
                    Mutable: true
                }
            ],
            AutoVerifiedAttributes: ['email']
        }).condition(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool);
    };
    ResourceFactory.prototype.makeUserPoolNativeClient = function () {
        return new cognito_1.default.UserPoolClient({
            ClientName: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolMobileClientName),
            UserPoolId: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolLogicalID), cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)),
            GenerateSecret: true,
            RefreshTokenValidity: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolRefreshTokenValidity),
            ReadAttributes: [],
            WriteAttributes: []
        }).condition(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool);
    };
    ResourceFactory.prototype.makeUserPoolJSClient = function () {
        return new cognito_1.default.UserPoolClient({
            ClientName: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolJSClientName),
            UserPoolId: cloudform_1.Fn.If(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool, cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.RESOURCES.AuthCognitoUserPoolLogicalID), cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolId)),
            GenerateSecret: false,
            RefreshTokenValidity: cloudform_1.Fn.Ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.AuthCognitoUserPoolRefreshTokenValidity),
            ReadAttributes: [],
            WriteAttributes: []
        }).condition(graphql_transformer_common_1.ResourceConstants.CONDITIONS.AuthShouldCreateUserPool);
    };
    /**
     * Builds a VTL expression that will set the
     * ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable variable to
     * true if the user is static group authorized.
     * @param rules The list of static group authorization rules.
     */
    ResourceFactory.prototype.staticGroupAuthorizationExpression = function (rules) {
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Static Group Authorization Rules");
        }
        var allowedGroups = [];
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
            var rule = rules_1[_i];
            var groups = rule.groups;
            for (var _a = 0, groups_1 = groups; _a < groups_1.length; _a++) {
                var group = groups_1[_a];
                if (group) {
                    allowedGroups.push(group);
                }
            }
        }
        // TODO: Enhance cognito:groups to work with non cognito based auth.
        return graphql_mapping_template_1.block('Static Group Authorization Checks', [
            this.setUserGroups(),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('allowedGroups'), graphql_mapping_template_1.list(allowedGroups.map(function (s) { return graphql_mapping_template_1.str(s); }))),
            // tslint:disable-next-line
            graphql_mapping_template_1.raw("#set($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable + " = $util.defaultIfNull($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable + ", false))"),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref('userGroups'), [
                graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('allowedGroup'), graphql_mapping_template_1.ref('allowedGroups'), [
                    graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('$allowedGroup == $userGroup'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable), graphql_mapping_template_1.raw('true')))
                ])
            ])
        ]);
    };
    /**
     * Given a set of dynamic group authorization rules verifies that input
     * value satisfies at least one dynamic group authorization rule.
     * @param rules The list of authorization rules.
     * @param variableToCheck The name of the value containing the input.
     * @param variableToSet The name of the variable to set when auth is satisfied.
     */
    ResourceFactory.prototype.dynamicGroupAuthorizationExpressionForCreateOperations = function (rules, variableToCheck, variableToSet) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.args.input'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsDynamicGroupAuthorizedVariable; }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Dynamic Group Authorization Rules");
        }
        var groupAuthorizationExpressions = [];
        for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
            var rule = rules_2[_i];
            var groupsAttribute = rule.groupsField || constants_1.DEFAULT_GROUPS_FIELD;
            groupAuthorizationExpressions = groupAuthorizationExpressions.concat(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", groupsField: \"" + groupsAttribute + "\" }"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw("$util.defaultIfNull($" + variableToSet + ", false)")), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref('userGroups'), [
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref("$util.isList($ctx.args.input." + groupsAttribute + ")"), graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(variableToCheck + "." + groupsAttribute + ".contains($userGroup)"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true')))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isString($ctx.args.input." + groupsAttribute + ")"), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$ctx.args.input." + groupsAttribute + " == $userGroup"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))))
            ]));
        }
        return graphql_mapping_template_1.block('Dynamic Group Authorization Checks', [
            this.setUserGroups()
        ].concat(groupAuthorizationExpressions));
    };
    /**
     * Given a set of owner authorization rules verifies that input
     * value satisfies at least one rule.
     * @param rules The list of authorization rules.
     * @param variableToCheck The name of the value containing the input.
     * @param variableToSet The name of the variable to set when auth is satisfied.
     */
    ResourceFactory.prototype.ownerAuthorizationExpressionForCreateOperations = function (rules, fieldIsList, variableToCheck, variableToSet) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.args.input'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsOwnerAuthorizedVariable; }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Owner Authorization Rules");
        }
        var groupAuthorizationExpressions = [];
        var ruleNumber = 0;
        for (var _i = 0, rules_3 = rules; _i < rules_3.length; _i++) {
            var rule = rules_3[_i];
            var ownerAttribute = rule.ownerField || constants_1.DEFAULT_OWNER_FIELD;
            var rawUsername = rule.identityField || constants_1.DEFAULT_IDENTITY_FIELD;
            var isUsern = isUsername(rawUsername);
            var identityAttribute = replaceIfUsername(rawUsername);
            var ownerFieldIsList = fieldIsList(ownerAttribute);
            var allowedOwnersVariable = "allowedOwners" + ruleNumber;
            groupAuthorizationExpressions = groupAuthorizationExpressions.concat(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", ownerField: \"" + ownerAttribute + "\", identityField: \"" + identityAttribute + "\" }"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedOwnersVariable), graphql_mapping_template_1.raw("$util.defaultIfNull($" + variableToCheck + "." + ownerAttribute + ", null)")), isUsern ?
                // tslint:disable-next-line
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('identityValue'), graphql_mapping_template_1.raw("$util.defaultIfNull($ctx.identity.claims.get(\"" + rawUsername + "\"), $util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\"))")) :
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('identityValue'), graphql_mapping_template_1.raw("$util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\")")), 
            // If a list of owners check for at least one.
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isList($" + allowedOwnersVariable + ")"), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(allowedOwnersVariable), [
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$allowedOwner == $identityValue"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))),
            ])), 
            // If a single owner check for at least one.
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isString($" + allowedOwnersVariable + ")"), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$" + allowedOwnersVariable + " == $identityValue"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true')))));
            // If the owner field is not a list and the user does not
            // provide a value for the owner, set the owner automatically.
            if (!ownerFieldIsList) {
                groupAuthorizationExpressions.push(
                // If the owner is not provided set it automatically.
                // If the user explicitly provides null this will be false and we leave it null.
                graphql_mapping_template_1.iff(graphql_mapping_template_1.and([
                    graphql_mapping_template_1.raw("$util.isNull($" + allowedOwnersVariable + ")"),
                    graphql_mapping_template_1.parens(graphql_mapping_template_1.raw("! $" + variableToCheck + ".containsKey(\"" + ownerAttribute + "\")")),
                ]), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.qref("$" + variableToCheck + ".put(\"" + ownerAttribute + "\", $identityValue)"),
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))
                ])));
            }
            else {
                // If the owner field is a list and the user does not
                // provide a list of values for the owner, set the list with
                // the owner as the sole member.
                groupAuthorizationExpressions.push(
                // If the owner is not provided set it automatically.
                // If the user explicitly provides null this will be false and we leave it null.
                graphql_mapping_template_1.iff(graphql_mapping_template_1.and([
                    graphql_mapping_template_1.raw("$util.isNull($" + allowedOwnersVariable + ")"),
                    graphql_mapping_template_1.parens(graphql_mapping_template_1.raw("! $" + variableToCheck + ".containsKey(\"" + ownerAttribute + "\")")),
                ]), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.qref("$" + variableToCheck + ".put(\"" + ownerAttribute + "\", [\"$identityValue\"])"),
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))
                ])));
            }
            ruleNumber++;
        }
        return graphql_mapping_template_1.block('Owner Authorization Checks', [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw("false"))
        ].concat(groupAuthorizationExpressions));
    };
    /**
     * Given a set of dynamic group authorization rules verifies w/ a conditional
     * expression that the existing object has the correct group expression.
     * @param rules The list of authorization rules.
     * @param variableToCheck The name of the value containing the input.
     * @param variableToSet The name of the variable to set when auth is satisfied.
     */
    ResourceFactory.prototype.dynamicGroupAuthorizationExpressionForUpdateOrDeleteOperations = function (rules, variableToCheck, variableToSet) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.args.input'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsDynamicGroupAuthorizedVariable; }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Dynamic Group Authorization Rules");
        }
        var groupAuthorizationExpressions = [];
        var ruleNumber = 0;
        for (var _i = 0, rules_4 = rules; _i < rules_4.length; _i++) {
            var rule = rules_4[_i];
            var groupsAttribute = rule.groupsField || constants_1.DEFAULT_GROUPS_FIELD;
            var groupsAttributeName = "groupsAttribute" + ruleNumber;
            var groupName = "group" + ruleNumber;
            groupAuthorizationExpressions = groupAuthorizationExpressions.concat(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", groupsField: \"" + groupsAttribute + "\" }"), 
            // Add the new auth expression and values
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref('userGroups'), [
                graphql_mapping_template_1.raw("$util.qr($groupAuthExpressions.add(\"contains(#" + groupsAttributeName + ", :" + groupName + "$foreach.count)\"))"),
                graphql_mapping_template_1.raw("$util.qr($groupAuthExpressionValues.put(\":" + groupName + "$foreach.count\", { \"S\": $userGroup }))"),
            ]), graphql_mapping_template_1.raw("$util.qr($groupAuthExpressionNames.put(\"#" + groupsAttributeName + "\", \"" + groupsAttribute + "\"))"));
            ruleNumber++;
        }
        return graphql_mapping_template_1.block('Dynamic Group Authorization Checks', [
            this.setUserGroups(),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupAuthExpressions'), graphql_mapping_template_1.list([])),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupAuthExpressionValues'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupAuthExpressionNames'), graphql_mapping_template_1.obj({}))
        ].concat(groupAuthorizationExpressions));
    };
    /**
     * Given a set of owner authorization rules verifies with a conditional
     * expression that the existing object is owned.
     * @param rules The list of authorization rules.
     * @param variableToCheck The name of the value containing the input.
     * @param variableToSet The name of the variable to set when auth is satisfied.
     */
    ResourceFactory.prototype.ownerAuthorizationExpressionForUpdateOrDeleteOperations = function (rules, fieldIsList, variableToCheck, variableToSet) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.args.input'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsOwnerAuthorizedVariable; }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Owner Authorization Rules");
        }
        var ownerAuthorizationExpressions = [];
        var ruleNumber = 0;
        for (var _i = 0, rules_5 = rules; _i < rules_5.length; _i++) {
            var rule = rules_5[_i];
            var ownerAttribute = rule.ownerField || constants_1.DEFAULT_OWNER_FIELD;
            var rawUsername = rule.identityField || constants_1.DEFAULT_IDENTITY_FIELD;
            var isUsern = isUsername(rawUsername);
            var identityAttribute = replaceIfUsername(rawUsername);
            var ownerFieldIsList = fieldIsList(ownerAttribute);
            var ownerName = "owner" + ruleNumber;
            var identityName = "identity" + ruleNumber;
            ownerAuthorizationExpressions.push(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", ownerField: \"" + ownerAttribute + "\", identityField: \"" + identityAttribute + "\" }"));
            if (ownerFieldIsList) {
                ownerAuthorizationExpressions.push(graphql_mapping_template_1.raw("$util.qr($ownerAuthExpressions.add(\"contains(#" + ownerName + ", :" + identityName + ")\"))"));
            }
            else {
                ownerAuthorizationExpressions.push(graphql_mapping_template_1.raw("$util.qr($ownerAuthExpressions.add(\"#" + ownerName + " = :" + identityName + "\"))"));
            }
            ownerAuthorizationExpressions = ownerAuthorizationExpressions.concat(graphql_mapping_template_1.raw("$util.qr($ownerAuthExpressionNames.put(\"#" + ownerName + "\", \"" + ownerAttribute + "\"))"), 
            // tslint:disable
            isUsern ?
                graphql_mapping_template_1.raw("$util.qr($ownerAuthExpressionValues.put(\":" + identityName + "\", $util.dynamodb.toDynamoDB($util.defaultIfNull($ctx.identity.claims.get(\"" + rawUsername + "\"), $util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\")))))") :
                graphql_mapping_template_1.raw("$util.qr($ownerAuthExpressionValues.put(\":" + identityName + "\", $util.dynamodb.toDynamoDB($util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\"))))")
            // tslint:enable
            );
            ruleNumber++;
        }
        return graphql_mapping_template_1.block('Owner Authorization Checks', [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('ownerAuthExpressions'), graphql_mapping_template_1.list([])),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('ownerAuthExpressionValues'), graphql_mapping_template_1.obj({})),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('ownerAuthExpressionNames'), graphql_mapping_template_1.obj({}))
        ].concat(ownerAuthorizationExpressions));
    };
    /**
     * Given a list of rules return a VTL expression that checks if the given variableToCheck
     * statisies at least one of the auth rules.
     * @param rules The list of dynamic group authorization rules.
     */
    ResourceFactory.prototype.dynamicGroupAuthorizationExpressionForReadOperations = function (rules, variableToCheck, variableToSet, defaultValue) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.result'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsDynamicGroupAuthorizedVariable; }
        if (defaultValue === void 0) { defaultValue = graphql_mapping_template_1.raw("$util.defaultIfNull($" + variableToSet + ", false)"); }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Dynamic Group Authorization Rules");
        }
        var groupAuthorizationExpressions = [];
        for (var _i = 0, rules_6 = rules; _i < rules_6.length; _i++) {
            var rule = rules_6[_i];
            var groupsAttribute = rule.groupsField || constants_1.DEFAULT_GROUPS_FIELD;
            groupAuthorizationExpressions = groupAuthorizationExpressions.concat(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", groupsField: \"" + groupsAttribute + "\" }"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('allowedGroups'), graphql_mapping_template_1.ref(variableToCheck + "." + groupsAttribute)), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref('userGroups'), [
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw('$util.isList($allowedGroups)'), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$allowedGroups.contains($userGroup)"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true')))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isString($allowedGroups)"), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$allowedGroups == $userGroup"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))))
            ]));
        }
        return graphql_mapping_template_1.block('Dynamic Group Authorization Checks', [
            this.setUserGroups(),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), defaultValue)
        ].concat(groupAuthorizationExpressions));
    };
    /**
     * Given a list of rules return a VTL expression that checks if the given variableToCheck
     * statisies at least one of the auth rules.
     * @param rules The list of dynamic group authorization rules.
     */
    ResourceFactory.prototype.ownerAuthorizationExpressionForReadOperations = function (rules, variableToCheck, variableToSet, defaultValue) {
        if (variableToCheck === void 0) { variableToCheck = 'ctx.result'; }
        if (variableToSet === void 0) { variableToSet = graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsOwnerAuthorizedVariable; }
        if (defaultValue === void 0) { defaultValue = graphql_mapping_template_1.raw("$util.defaultIfNull($" + variableToSet + ", false)"); }
        if (!rules || rules.length === 0) {
            return graphql_mapping_template_1.comment("No Owner Authorization Rules");
        }
        var ownerAuthorizationExpressions = [];
        var ruleNumber = 0;
        for (var _i = 0, rules_7 = rules; _i < rules_7.length; _i++) {
            var rule = rules_7[_i];
            var ownerAttribute = rule.ownerField || constants_1.DEFAULT_OWNER_FIELD;
            var rawUsername = rule.identityField || constants_1.DEFAULT_IDENTITY_FIELD;
            var isUsern = isUsername(rawUsername);
            var identityAttribute = replaceIfUsername(rawUsername);
            var allowedOwnersVariable = "allowedOwners" + ruleNumber;
            ownerAuthorizationExpressions = ownerAuthorizationExpressions.concat(graphql_mapping_template_1.comment("Authorization rule: { allow: \"" + rule.allow + "\", ownerField: \"" + ownerAttribute + "\", identityField: \"" + identityAttribute + "\" }"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedOwnersVariable), graphql_mapping_template_1.ref(variableToCheck + "." + ownerAttribute)), isUsern ?
                // tslint:disable-next-line
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('identityValue'), graphql_mapping_template_1.raw("$util.defaultIfNull($ctx.identity.claims.get(\"" + rawUsername + "\"), $util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\"))")) :
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('identityValue'), graphql_mapping_template_1.raw("$util.defaultIfNull($ctx.identity.claims.get(\"" + identityAttribute + "\"), \"" + NONE_VALUE + "\")")), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isList($" + allowedOwnersVariable + ")"), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(allowedOwnersVariable), [
                graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$allowedOwner == $identityValue"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true'))),
            ])), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$util.isString($" + allowedOwnersVariable + ")"), graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$" + allowedOwnersVariable + " == $identityValue"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), graphql_mapping_template_1.raw('true')))));
            ruleNumber++;
        }
        return graphql_mapping_template_1.block('Owner Authorization Checks', [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref(variableToSet), defaultValue)
        ].concat(ownerAuthorizationExpressions));
    };
    //
    ResourceFactory.prototype.throwIfUnauthorized = function () {
        var ifUnauthThrow = graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.parens(graphql_mapping_template_1.or([
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable), graphql_mapping_template_1.raw('true')),
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsDynamicGroupAuthorizedVariable), graphql_mapping_template_1.raw('true')),
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsOwnerAuthorizedVariable), graphql_mapping_template_1.raw('true'))
        ]))), graphql_mapping_template_1.raw('$util.unauthorized()'));
        return graphql_mapping_template_1.block('Throw if unauthorized', [
            ifUnauthThrow,
        ]);
    };
    // A = IsStaticallyAuthed
    // B = AuthConditionIsNotNull
    // ! (A OR B) == (!A AND !B)
    ResourceFactory.prototype.throwIfNotStaticGroupAuthorizedOrAuthConditionIsEmpty = function () {
        var ifUnauthThrow = graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.parens(graphql_mapping_template_1.or([
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsStaticGroupAuthorizedVariable), graphql_mapping_template_1.raw('true')),
            graphql_mapping_template_1.parens(graphql_mapping_template_1.raw('$authCondition && $authCondition.expression != ""'))
        ]))), graphql_mapping_template_1.raw('$util.unauthorized()'));
        return graphql_mapping_template_1.block('Throw if unauthorized', [
            ifUnauthThrow,
        ]);
    };
    ResourceFactory.prototype.collectAuthCondition = function () {
        return graphql_mapping_template_1.block('Collect Auth Condition', [
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition), graphql_mapping_template_1.obj({
                expression: graphql_mapping_template_1.str(""),
                expressionNames: graphql_mapping_template_1.obj({}),
                expressionValues: graphql_mapping_template_1.obj({})
            })),
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str('')),
            graphql_mapping_template_1.comment('Add dynamic group auth conditions if they exist'),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('groupAuthExpressions'), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('authExpr'), graphql_mapping_template_1.ref('groupAuthExpressions'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str("$totalAuthExpression $authExpr")),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('foreach.hasNext'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str("$totalAuthExpression OR")))
            ])),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('groupAuthExpressionNames'), graphql_mapping_template_1.raw("$util.qr($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition + ".expressionNames.putAll($groupAuthExpressionNames))")),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('groupAuthExpressionValues'), graphql_mapping_template_1.raw("$util.qr($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition + ".expressionValues.putAll($groupAuthExpressionValues))")),
            graphql_mapping_template_1.comment('Add owner auth conditions if they exist'),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$totalAuthExpression != \"\" && $ownerAuthExpressions && $ownerAuthExpressions.size() > 0"), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str("$totalAuthExpression OR"))),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ownerAuthExpressions'), graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('authExpr'), graphql_mapping_template_1.ref('ownerAuthExpressions'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str("$totalAuthExpression $authExpr")),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('foreach.hasNext'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('totalAuthExpression'), graphql_mapping_template_1.str("$totalAuthExpression OR")))
            ])),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ownerAuthExpressionNames'), graphql_mapping_template_1.raw("$util.qr($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition + ".expressionNames.putAll($ownerAuthExpressionNames))")),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ownerAuthExpressionValues'), graphql_mapping_template_1.raw("$util.qr($" + graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition + ".expressionValues.putAll($ownerAuthExpressionValues))")),
            graphql_mapping_template_1.comment('Set final expression if it has changed.'),
            graphql_mapping_template_1.iff(graphql_mapping_template_1.raw("$totalAuthExpression != \"\""), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.AuthCondition + ".expression"), graphql_mapping_template_1.str('($totalAuthExpression)')))
        ]);
    };
    ResourceFactory.prototype.appendItemIfLocallyAuthorized = function () {
        return graphql_mapping_template_1.iff(graphql_mapping_template_1.parens(graphql_mapping_template_1.or([
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsLocalDynamicGroupAuthorizedVariable), graphql_mapping_template_1.raw('true')),
            graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(graphql_transformer_common_1.ResourceConstants.SNIPPETS.IsLocalOwnerAuthorizedVariable), graphql_mapping_template_1.raw('true'))
        ])), graphql_mapping_template_1.qref('$items.add($item)'));
    };
    ResourceFactory.prototype.setUserGroups = function () {
        return graphql_mapping_template_1.set(graphql_mapping_template_1.ref('userGroups'), graphql_mapping_template_1.ref('ctx.identity.claims.get("cognito:groups")'));
    };
    return ResourceFactory;
}());
exports.ResourceFactory = ResourceFactory;
//# sourceMappingURL=resources.js.map