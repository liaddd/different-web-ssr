{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport cn from \"classnames\";\nimport { animateScroll as scroll } from \"react-scroll\";\nimport Router from \"next/router\";\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport he from \"date-fns/locale/he\";\nimport \"./ReactDatePicker.scss\";\nimport { stepper } from \"../../actions/forms/forms.actions\";\nimport { STEPPER_STEP4 } from \"../../actions/forms/forms.actions.constants\";\nimport validator from \"../../utils/validate\";\nimport requestClient from \"../../utils/requestClient/requests\";\nimport UserActions from \"../../actions/users/users.actions\";\nimport { get } from \"lodash\";\nimport { logout } from \"../../actions/common/common.actions\";\nimport \"./PersonalInfo.scss\";\nconst DEFAULT_ERROR = \"value isn't valid \";\nconst DEFAULT_DATE_FORMAT = \"y M d\";\nconst NOT_EMPTY_DATE_FORMAT = \"y/M/d\";\nconst MAX_PRICE = 7000;\nconst MIN_PRICE = 1000;\nregisterLocale(\"he\", he);\n\nclass PersonalInfoStep4 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      price: this.props.user.price || void 0,\n      enterDate: get(this.props, \"user.entry_date\") ? new Date(this.props.user.entry_date) : null,\n      leaveDate: get(this.props, \"user.exit_date\") ? new Date(this.props.user.exit_date) : null,\n      priceValidate: {\n        error: void 0\n      },\n      leaveDateValidate: {\n        error: void 0\n      },\n      enterDateValidate: {\n        error: void 0\n      }\n    });\n\n    _defineProperty(this, \"onChangeLeaveDate\", date => {\n      this.setState({\n        leaveDate: date\n      });\n    });\n\n    _defineProperty(this, \"onChangeEnterDate\", date => {\n      this.setState({\n        enterDate: date\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      let price = validator.validate.validate(validator.constants.InputStringRegex, this.state.price, DEFAULT_ERROR);\n\n      if (_parseInt(this.state.price) >= MAX_PRICE) {\n        price.error = \"שכר דירה חודשי מקסימלי: 7,000\";\n      }\n\n      if (_parseInt(this.state.price) <= MIN_PRICE) {\n        price.error = \"שכר דירה חודשי מינימלי: 1,000\";\n      }\n\n      if (price && price.error) {\n        this.setState({\n          priceValidate: {\n            error: price.error\n          }\n        });\n      } else {\n        this.setState({\n          priceValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let enterDate = validator.validate.validate(validator.constants.InputStringRegex, this.state.enterDate, DEFAULT_ERROR);\n\n      if (enterDate && enterDate.error) {\n        this.setState({\n          enterDateValidate: {\n            error: enterDate.error\n          }\n        });\n      } else {\n        this.setState({\n          enterDateValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let leaveDate = validator.validate.validate(validator.constants.InputStringRegex, this.state.leaveDate, DEFAULT_ERROR);\n\n      if (leaveDate && leaveDate.error) {\n        this.setState({\n          leaveDateValidate: {\n            error: leaveDate.error\n          }\n        });\n      } else {\n        this.setState({\n          leaveDateValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      if (price.valid && enterDate.valid && leaveDate.valid && !price.error) {\n        this.props.onSetUserData({\n          showModal: true\n        });\n        requestClient.step4({\n          property_id: this.props.user.id,\n          price: _parseInt(this.state.price),\n          property_type: 1,\n          exit_date: this.state.leaveDate,\n          entry_date: this.state.enterDate\n        }, this.props.user.auth.session_token).then(data => {\n          data.data.showModal = false;\n          this.props.onSetUserData(data.data);\n          this.props.onSetStepper({\n            activeStep: 4,\n            step4: {\n              edit: true\n            }\n          }); // TODO: move route name to constant\n\n          Router.push(\"/card\");\n        }).catch(error => {\n          console.error(error);\n          this.props.onSetUserData({\n            showModal: false\n          });\n\n          if (get(error, \"response.data.errorCode\") === \"UNAUTHORIZED\") {\n            this.props.onLogout();\n            Router.push(\"/\");\n          }\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.height && scroll.scrollTo(this.props.height - this.props.height / 2);\n  }\n\n  render() {\n    const {\n      activeStep\n    } = this.props.stepper;\n    return __jsx(Fragment, null, __jsx(\"div\", {\n      className: cn({\n        \"personal-info-section\": true,\n        \"personal-info-section-4\": true,\n        \"personal-info-section-active\": activeStep === STEPPER_STEP4\n      })\n    }, __jsx(\"form\", {\n      className: \"personal-info-form\",\n      id: \"personal-info-form\",\n      noValidate: true,\n      onSubmit: e => this.onSubmit(e)\n    }, __jsx(\"div\", {\n      className: \"personal-info-form-container form-container\"\n    }, __jsx(\"div\", {\n      className: \"input-block-row width-max\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-city\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.price,\n        \"input-error\": this.state.priceValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"number\",\n      id: \"input-personal-info-city\",\n      placeholder: \"\\xA0\",\n      value: this.state.price,\n      onChange: e => {\n        this.setState({\n          price: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05E9\\u05DB\\u05E8 \\u05D4\\u05D3\\u05D9\\u05E8\\u05D4 \\u05D1\\u05D4\\u05E1\\u05DB\\u05DD \\u05D4\\u05E9\\u05DB\\u05D9\\u05E8\\u05D5\\u05EA\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.priceValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, this.state.priceValidate.error))), __jsx(\"div\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-house-number\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": !!this.state.enterDate,\n        \"input-error\": this.state.enterDateValidate.error !== void 0\n      })\n    }, __jsx(DatePicker, {\n      selected: this.state.enterDate ? this.state.enterDate : null,\n      onChange: date => this.onChangeEnterDate(date),\n      className: \"input-text input-text-grey input-date-picker\",\n      minDate: new Date(),\n      locale: \"he\",\n      dateFormat: this.state.enterDate ? NOT_EMPTY_DATE_FORMAT : DEFAULT_DATE_FORMAT\n    }), __jsx(\"span\", {\n      className: \"input-label-span-date\"\n    }, \"\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA \\u05DB\\u05E0\\u05D9\\u05E1\\u05D4 \\u05DC\\u05D3\\u05D9\\u05E8\\u05D4\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.enterDateValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"require\"))), __jsx(\"div\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-street\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": !!this.state.leaveDate,\n        \"input-error\": this.state.leaveDateValidate.error !== void 0\n      })\n    }, __jsx(DatePicker, {\n      selected: this.state.leaveDate ? this.state.leaveDate : null,\n      onChange: this.onChangeLeaveDate,\n      className: \"input-text input-text-grey input-date-picker\",\n      minDate: this.state.enterDate ? this.state.enterDate : new Date(),\n      locale: \"he\",\n      dateFormat: this.state.leaveDate ? NOT_EMPTY_DATE_FORMAT : DEFAULT_DATE_FORMAT\n    }), __jsx(\"span\", {\n      className: \"input-label-span-date\"\n    }, \"\\u05EA\\u05D0\\u05E8\\u05D9\\u05DA \\u05D9\\u05E6\\u05D9\\u05D0\\u05D4 \\u05DE\\u05D4\\u05D3\\u05D9\\u05E8\\u05D4\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.leaveDateValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"require\")))), __jsx(\"div\", {\n      className: \"btn-block\"\n    }, __jsx(\"input\", {\n      className: \"input-submit btn-blue btn-small btn-bold\",\n      id: \"personal-info-submit\",\n      type: \"submit\",\n      value: \"\\u05D4\\u05DE\\u05E9\\u05DA\"\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    stepper: state.forms.stepper\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetStepper: action => {\n      dispatch(stepper(action));\n    },\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    },\n    onLogout: action => {\n      dispatch(logout(action));\n    }\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(PersonalInfoStep4);\nexport default withConnect;","map":null,"metadata":{},"sourceType":"module"}