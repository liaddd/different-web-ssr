{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport \"./PersonalInfo.scss\";\nimport validator from \"../../utils/validate\";\nimport requestClient from \"../../utils/requestClient/requests\";\nimport { stepper } from \"../../actions/forms/forms.actions\";\nimport UserActions from \"../../actions/users/users.actions\";\nimport ModalPersonalInfo from \"../../components/Modal/ModalPersonalInfo\";\nimport { get } from \"lodash\";\nimport ModalLoader from \"../../components/Modal/ModalLoader\";\nimport { logout } from \"../../actions/common/common.actions\";\nconst DEFAULT_ERROR = \"value isn't valid \";\nconst DEFAULT_ERROR_ID = \"*ת.ז לא תקינה\";\nconst ERROR_RESPONSE = \"אתה לא יכול לבדוק את עצמך\";\nconst MAX_VALIDATE_TENANTS = 5;\n\nclass CurrentTenantBlock extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      showModal: false,\n      showModalError: false,\n      checked_user: null,\n      checkBox: false,\n      declarationCheckBox: false,\n      errorMessage: \"\",\n      checked_users: this.props.user.checked_users\n    });\n\n    _defineProperty(this, \"sendData\", data => {\n      if (data) {\n        this.setState(_objectSpread({}, data));\n      } else this.setState({\n        showModal: false\n      });\n    });\n\n    _defineProperty(this, \"initiateTenant\", (tenant, id) => {\n      const number = id + 1;\n      return __jsx(Fragment, {\n        key: id\n      }, __jsx(\"div\", {\n        className: \"personal-info-form-title\"\n      }, __jsx(\"span\", {\n        className: \"personal-info-form-title-text\"\n      }, \"\\u05D3\\u05D9\\u05D9\\u05E8\"), __jsx(\"span\", {\n        className: \"personal-info-form-title-number\"\n      }, number)), __jsx(\"div\", {\n        className: \"personal-info-form-container form-container\"\n      }, __jsx(\"p\", {\n        className: \"input-block-row\"\n      }, __jsx(\"label\", {\n        htmlFor: \"input-personal-info-first-name\",\n        className: cn(\"input-label\", {\n          \"input-error\": this.state.checked_users && this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"first_nameValidate\") && this.state.checked_users[id].first_nameValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].first_nameValidate.error !== void 0,\n          \"input-not-empty\": this.state.checked_users[id] && this.state.checked_users[id].first_name && this.state.checked_users[id].first_name.length > 0\n        })\n      }, __jsx(\"input\", {\n        className: \"input-text input-text-grey\",\n        type: \"text\",\n        id: \"input-personal-first-name\",\n        placeholder: \"\\xA0\",\n        value: this.state.checked_users[id].first_name ? this.state.checked_users[id].first_name : \"\",\n        onChange: e => {\n          let tenants = this.state.checked_users;\n          tenants[id].first_name = e.target.value;\n          this.setState({\n            tenants\n          });\n        }\n      }), __jsx(\"span\", {\n        className: \"input-label-span\"\n      }, \" *\\u05E9\\u05DD \\u05D4\\u05E4\\u05E8\\u05D8\\u05D9\"), __jsx(\"span\", {\n        className: \"input-border\"\n      }), this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"first_nameValidate\") && this.state.checked_users[id].first_nameValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].first_nameValidate.error !== void 0 && __jsx(\"span\", {\n        className: \"personal-info-input-error span-error\"\n      }, \"error\"))), __jsx(\"p\", {\n        className: \"input-block-row\"\n      }, __jsx(\"label\", {\n        htmlFor: \"input-personal-info-last-name\",\n        className: cn(\"input-label\", {\n          \"input-error\": this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"last_nameValidate\") && this.state.checked_users[id].last_nameValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].last_nameValidate.error !== void 0,\n          \"input-not-empty\": this.state.checked_users[id] && this.state.checked_users[id].last_name && this.state.checked_users[id].last_name.length > 0\n        })\n      }, __jsx(\"input\", {\n        className: \"input-text input-text-grey\",\n        type: \"text\",\n        id: \"input-personal-info-last-name\",\n        placeholder: \"\\xA0\",\n        value: this.state.checked_users[id].last_name ? this.state.checked_users[id].last_name : \"\",\n        onChange: e => {\n          let tenants = this.state.checked_users;\n          tenants[id].last_name = e.target.value;\n          this.setState({\n            tenants\n          });\n        }\n      }), __jsx(\"span\", {\n        className: \"input-label-span\"\n      }, \"*\\u05E9\\u05DD \\u05DE\\u05E9\\u05E4\\u05D7\\u05EA\\u05D9\"), __jsx(\"span\", {\n        className: \"input-border\"\n      }), this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"last_nameValidate\") && this.state.checked_users[id].last_nameValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].last_nameValidate.error !== void 0 && __jsx(\"span\", {\n        className: \"personal-info-input-error span-error\"\n      }, \"error\"))), __jsx(\"p\", {\n        className: \"input-block-row\"\n      }, __jsx(\"label\", {\n        htmlFor: \"input-personal-info-id-number\",\n        className: cn(\"input-label\", {\n          \"input-error\": this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"id_numberValidate\") && this.state.checked_users[id].id_numberValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].id_numberValidate.error !== void 0,\n          \"input-not-empty\": this.state.checked_users[id] && this.state.checked_users[id].id_number && this.state.checked_users[id].id_number.length > 0\n        })\n      }, __jsx(\"input\", {\n        className: \"input-text input-text-grey\",\n        type: \"number\",\n        id: \"input-personal-info-id-number\",\n        placeholder: \"\\xA0\",\n        value: this.state.checked_users[id].id_number ? this.state.checked_users[id].id_number : \"\",\n        onChange: e => {\n          let tenants = this.state.checked_users;\n          tenants[id].id_number = e.target.value;\n          this.setState({\n            tenants\n          });\n        }\n      }), __jsx(\"span\", {\n        className: \"input-label-span\"\n      }, \"*\\u05DE\\u05E1\\u05E4\\u05E8 \\u05EA.\\u05D6\"), __jsx(\"span\", {\n        className: \"input-border\"\n      }), this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"id_numberValidate\") && this.state.checked_users[id].id_numberValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].id_numberValidate.error !== void 0 && __jsx(\"span\", {\n        className: \"personal-info-input-error span-error\"\n      }, DEFAULT_ERROR_ID))), __jsx(\"p\", {\n        className: \"input-block-row\"\n      }, __jsx(\"label\", {\n        htmlFor: \"input-personal-info-phone-number\",\n        className: cn(\"input-label\", {\n          \"input-error\": this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"phoneValidate\") && this.state.checked_users[id].phoneValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].phoneValidate.error !== void 0,\n          \"input-not-empty\": this.state.checked_users[id] && this.state.checked_users[id].phone && this.state.checked_users[id].phone.length > 0\n        })\n      }, __jsx(\"input\", {\n        className: \"input-text input-text-grey\",\n        type: \"tel\",\n        dir: \"auto\",\n        style: {\n          textAlign: \"end\"\n        },\n        id: \"input-personal-info-phone-number\",\n        placeholder: \"\\xA0\",\n        value: this.state.checked_users[id].phone ? this.state.checked_users[id].phone : \"\",\n        onChange: e => {\n          let tenants = this.state.checked_users;\n          tenants[id].phone = e.target.value;\n          this.setState({\n            tenants\n          });\n        }\n      }), __jsx(\"span\", {\n        className: \"input-label-span\"\n      }, \"*\\u05DE\\u05E1\\u05E4\\u05E8 \\u05D8\\u05DC\\u05E4\\u05D5\\u05DF\"), __jsx(\"span\", {\n        className: \"input-border\"\n      }), this.state.checked_users[id] && this.state.checked_users[id].hasOwnProperty(\"phoneValidate\") && this.state.checked_users[id].phoneValidate.hasOwnProperty(\"error\") && this.state.checked_users[id].phoneValidate.error !== void 0 && __jsx(\"span\", {\n        className: \"personal-info-input-error span-error\"\n      }, \"error\")))));\n    });\n\n    _defineProperty(this, \"validateTenant\", tenant => {\n      let first_name = validator.validate.validate(validator.constants.InputStringRegex, tenant.first_name, DEFAULT_ERROR);\n\n      if (first_name && first_name.error) {\n        tenant.first_nameValidate.error = first_name.error;\n      } else {\n        if (get(tenant, \"first_nameValidate.error\")) {\n          tenant.first_nameValidate.error = void 0;\n        } else {\n          tenant.first_nameValidate = {\n            error: void 0\n          };\n        }\n      }\n\n      let last_name = validator.validate.validate(validator.constants.InputStringRegex, tenant.last_name, DEFAULT_ERROR);\n\n      if (last_name && last_name.error) {\n        tenant.last_nameValidate.error = last_name.error;\n      } else {\n        if (get(tenant, \"last_nameValidate.error\")) {\n          tenant.last_nameValidate.error = void 0;\n        } else {\n          tenant.last_nameValidate = {\n            error: void 0\n          };\n        }\n      }\n\n      let id_number = validator.validate.validate(validator.constants.IdNumberRegex, tenant.id_number, DEFAULT_ERROR_ID);\n\n      if (id_number && id_number.error) {\n        tenant.id_numberValidate.error = id_number.error;\n      } else {\n        if (get(tenant, \"id_numberValidate.error\")) {\n          tenant.id_numberValidate.error = void 0;\n        } else {\n          tenant.id_numberValidate = {\n            error: void 0\n          };\n        }\n      }\n\n      let phone = validator.validate.validate(validator.constants.IsraelPhoneNumberRegex, tenant.phone, DEFAULT_ERROR);\n\n      if (phone && phone.error) {\n        tenant.phoneValidate.error = phone.error;\n      } else {\n        if (get(tenant, \"phoneValidate.error\")) {\n          tenant.phoneValidate.error = void 0;\n        } else {\n          tenant.phoneValidate = {\n            error: void 0\n          };\n        }\n      }\n\n      if (tenant.property_id === null) {\n        tenant.property_id = this.props.user.id;\n      }\n\n      return tenant;\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      let validateForm = [];\n      let validateFormToString = [];\n      e.preventDefault();\n      let tenants = this.state.checked_users;\n      const validatedTenants = tenants.map(tenant => {\n        return this.validateTenant(tenant);\n      });\n      this.setState({\n        tenants: validatedTenants\n      });\n      let users = [];\n\n      for (let i = 0, length = tenants.length - 1; i <= length; i++) {\n        if (tenants[i].first_nameValidate.error !== void 0 || tenants[i].last_nameValidate.error !== void 0 || tenants[i].id_numberValidate.error !== void 0 || tenants[i].phoneValidate.error !== void 0) {\n          validateForm[i] = false;\n        } else {\n          let phone = tenants[i].phone;\n\n          if (tenants[i].phone[0] === \"0\") {\n            phone = phone.replace(/^0/, \"+972\");\n          }\n\n          users.push({\n            property_id: tenants[i].property_id,\n            phone: phone,\n            first_name: tenants[i].first_name,\n            last_name: tenants[i].last_name,\n            id_number: tenants[i].id_number\n          });\n          validateForm[i] = true;\n        }\n\n        validateFormToString[i] = true;\n      }\n\n      if (validateFormToString.toString() === validateForm.toString()) {\n        this.setState({\n          loading: true\n        }); //this.props.onSetUserData({showModal: true});\n\n        requestClient.step3(users, this.props.user.auth.session_token).then(data => {\n          if (get(data, \"data.credit\")) {\n            const resUsers = get(data, \"data.checked_users\", []);\n            const result = resUsers.filter(user => user.exist_tenant_id); // TODO return only with exist_tenant_id\n\n            this.setState({\n              showModal: true,\n              showModalError: false,\n              loading: false,\n              result,\n              errorMessage: \"\"\n            }); // this.props.onSetUserData({credit:data.data.credit, checked_users_step3:result, buttonsCount:result.length})\n          } else {\n            this.setState({\n              showModalError: true,\n              showModal: true,\n              loading: false,\n              errorMessage: \"לא עבר בדיקה\"\n            });\n          }\n        }).catch(error => {\n          let errorMessage = \"\";\n\n          if (get(error, \"response.data.errorCode\") === \"INVALID_ID\") {\n            errorMessage = DEFAULT_ERROR_ID;\n          }\n\n          if (get(error, \"response.data.errorCode\") === \"BAD_DATA\") {\n            errorMessage = ERROR_RESPONSE;\n          }\n\n          if (get(error, \"response.data.errorCode\") === \"CREDIT_SCORE_ERROR\") {\n            errorMessage = \"לא עבר בדיקה\";\n          }\n\n          if (get(error, 'response.data.errorCode') === \"E164_NUMBER\") {\n            errorMessage = 'מספר טלפון לא תקין';\n          } // this.props.onSetUserData({showModal: false});\n\n\n          this.setState({\n            showModal: true,\n            showModalError: true,\n            loading: false,\n            errorMessage\n          });\n\n          if (get(error, \"response.data.errorCode\") === \"UNAUTHORIZED\") {\n            this.props.onLogout();\n            Router.push(\"/\");\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    const checked_users = get(this.props, \"user.checked_users\", []);\n    return __jsx(Fragment, null, this.state.showModal && this.state.result && __jsx(ModalPersonalInfo, {\n      show: this.state.showModal,\n      users: this.state.result,\n      sendData: this.sendData,\n      showError: this.state.showModalError\n    }), __jsx(ModalLoader, {\n      show: this.state.loading\n    }), __jsx(\"form\", {\n      className: \"personal-info-form-3 personal-info-form\",\n      id: \"personal-info-form\",\n      onSubmit: this.onSubmit,\n      noValidate: true\n    }, checked_users.map((tenant, i) => this.initiateTenant(tenant, i)), this.state.checked_users && this.state.checked_users.length < MAX_VALIDATE_TENANTS && __jsx(\"div\", {\n      className: \"personal-info-add-block\",\n      onClick: () => {\n        let tenants = this.state.checked_users;\n\n        if (tenants.length < MAX_VALIDATE_TENANTS) {\n          tenants.push({\n            first_name: null,\n            last_name: null,\n            id_number: null,\n            phone: null,\n            property_id: this.props.user.id,\n            first_nameValidate: {\n              error: void 0\n            },\n            last_nameValidate: {\n              error: void 0\n            },\n            id_numberValidate: {\n              error: void 0\n            },\n            phoneValidate: {\n              error: void 0\n            }\n          });\n          this.setState({\n            checked_users: tenants\n          });\n          this.props.onSetUserData({\n            buttonsCount: tenants.length,\n            checked_users: tenants\n          });\n        }\n      }\n    }, __jsx(\"div\", {\n      className: \"personal-info-add\"\n    }, __jsx(\"img\", {\n      className: \"personal-info-add-icon\",\n      src: \"/img/plus-icon-white.svg\",\n      alt: \"\"\n    }), \"\\u05D4\\u05D0\\u05DD \\u05D9\\u05E9 \\u05D3\\u05D9\\u05D9\\u05E8 \\u05E0\\u05D5\\u05E1\\u05E3 \\u05D1\\u05D4\\u05E1\\u05DB\\u05DD \\u05D4\\u05E9\\u05DB\\u05D9\\u05E8\\u05D5\\u05EA \\u05D0\\u05D5\\u05EA\\u05D5 \\u05EA\\u05E8\\u05E6\\u05D4 \\u05E9\\u05E0\\u05D1\\u05D3\\u05D5\\u05E7?\")), __jsx(\"div\", {\n      className: \"personal-info-checkbox-block\"\n    }, this.props.activeRadioButton === 1 && __jsx(\"label\", {\n      className: \"personal-info-label-checkbox\",\n      htmlFor: \"personal-info-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"personal-info-input-checkbox input-checkbox\",\n      id: \"personal-info-checkbox\",\n      checked: this.state.checkBox,\n      onChange: e => {\n        this.setState({\n          checkBox: !this.state.checkBox\n        });\n      },\n      type: \"checkbox\"\n    }), \"\\u05D4\\u05E6\\u05D4\\u05E8\\u05EA\\u05D9 \\u05DC\\u05D2\\u05D1\\u05D9 \\u05D3\\u05D9\\u05D9\\u05E8 \\u05D6\\u05D4: \\u05D4\\u05EA\\u05E9\\u05DC\\u05D5\\u05DD \\u05D1\\u05D2\\u05D9\\u05DF \\u05D7\\u05D5\\u05D3\\u05E9 \\u05D4\\u05E9\\u05DB\\u05D9\\u05E8\\u05D5\\u05EA \\u05D4\\u05E8\\u05D0\\u05E9\\u05D5\\u05DF \\u05E9\\u05D5\\u05DC\\u05DD \\u05D1\\u05D6\\u05DE\\u05DF \\u05D5\\u05DC\\u05D0 \\u05D4\\u05D9\\u05D5 \\u05DE\\u05D0\\u05D6 \\u05E2\\u05D9\\u05DB\\u05D5\\u05D1\\u05D9\\u05DD \\u05D5/\\u05D0\\u05D5 \\u05D7\\u05D5\\u05E1\\u05E8\\u05D9\\u05DD \\u05D1\\u05EA\\u05E9\\u05DC\\u05D5\\u05DD.\")), __jsx(\"div\", {\n      className: \"personal-info-checkbox-block\"\n    }, __jsx(\"label\", {\n      className: \"personal-info-label-checkbox\",\n      htmlFor: \"personal-info-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"personal-info-input-checkbox input-checkbox\",\n      id: \"personal-info-checkbox\",\n      checked: this.state.declarationCheckBox,\n      onChange: e => {\n        this.setState({\n          declarationCheckBox: !this.state.declarationCheckBox\n        });\n      },\n      type: \"checkbox\"\n    }), \"\\u05D4\\u05E0\\u05E0\\u05D9 \\u05DE\\u05E6\\u05D4\\u05D9\\u05E8 \\u05DB\\u05D9 \\u05D0\\u05E0\\u05D9 \\u05DE\\u05D9\\u05D9\\u05D3\\u05E2 \\u05D0\\u05EA \\u05D4\\u05E9\\u05D5\\u05DB\\u05E8 \\u05D1\\u05D4\\u05E2\\u05D1\\u05E8\\u05EA \\u05D4\\u05E0\\u05EA\\u05D5\\u05E0\\u05D9\\u05DD \\u05DC\\u05E6\\u05D5\\u05E8\\u05DA \\u05D1\\u05D3\\u05D9\\u05E7\\u05D4 \\u05D5\\u05E8\\u05DB\\u05D9\\u05E9\\u05EA \\u05DE\\u05D5\\u05E6\\u05E8 \\u05D4\\u05D1\\u05D8\\u05D7\\u05EA \\u05E9\\u05DB\\u05E8 \\u05D4\\u05D3\\u05D9\\u05E8\\u05D4\")), __jsx(\"p\", {\n      style: {\n        color: \"#e7736d\"\n      }\n    }, this.state.errorMessage), __jsx(\"div\", {\n      className: \"btn-block\"\n    }, __jsx(\"input\", {\n      className: this.state.declarationCheckBox && (this.state.checkBox || this.props.activeRadioButton !== 1) ? \"input-submit btn-small btn-blue btn-bold\" : \"input-submit btn-small btn-grey btn-bold\",\n      id: \"personal-info-submit\",\n      disabled: !this.state.checkBox && this.props.activeRadioButton === 1,\n      type: \"submit\",\n      value: \"\\u05D1\\u05D3\\u05D5\\u05E7\"\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    stepper: state.forms.stepper\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetStepper: action => {\n      dispatch(stepper(action));\n    },\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    },\n    onLogout: action => {\n      dispatch(logout(action));\n    }\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(CurrentTenantBlock);\nexport default withConnect;","map":null,"metadata":{},"sourceType":"module"}