{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { get } from \"lodash\";\nimport Router from \"next/router\";\nimport cn from \"classnames\";\nimport { STEPPER_STEP1 } from \"./../../actions/forms/forms.actions.constants\";\nimport { stepper } from \"./../../actions/forms/forms.actions\";\nimport validator from \"./../../utils/validate/index\";\nimport requestClient from \"./../../utils/requestClient/requests\";\nimport UserActions from \"../../actions/users/users.actions\";\nimport { logout } from \"../../actions/common/common.actions\";\nconst DEFAULT_ERROR = \"value isn't valid \";\n\nclass PersonalInfoStep1 extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      first_name: null,\n      last_name: null,\n      id_number: null,\n      phone: null,\n      first_nameValidate: {\n        error: void 0\n      },\n      last_nameValidate: {\n        error: void 0\n      },\n      id_numberValidate: {\n        error: void 0\n      },\n      phoneValidate: {\n        error: void 0\n      }\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n      let first_name = validator.validate.validate(validator.constants.InputStringRegex, this.state.first_name, DEFAULT_ERROR);\n\n      if (first_name && first_name.error) {\n        this.setState({\n          first_nameValidate: {\n            error: first_name.error\n          }\n        });\n      } else {\n        this.setState({\n          first_nameValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let last_name = validator.validate.validate(validator.constants.InputStringRegex, this.state.last_name, DEFAULT_ERROR);\n\n      if (last_name && last_name.error) {\n        this.setState({\n          last_nameValidate: {\n            error: last_name.error\n          }\n        });\n      } else {\n        this.setState({\n          last_nameValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let id_number = validator.validate.validate(validator.constants.IdNumberRegex, this.state.id_number, DEFAULT_ERROR);\n\n      if (id_number && id_number.error) {\n        this.setState({\n          id_numberValidate: {\n            error: id_number.error\n          }\n        });\n      } else {\n        this.setState({\n          id_numberValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let phone = validator.validate.validate(validator.constants.IsraelPhoneNumberRegex, this.state.phone, DEFAULT_ERROR);\n\n      if (phone && phone.error) {\n        this.setState({\n          phoneValidate: {\n            error: phone.error\n          }\n        });\n      } else {\n        this.setState({\n          phoneValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      if (first_name.valid && last_name.valid && id_number.valid && phone.valid) {\n        this.props.onSetUserData({\n          showModal: true\n        });\n        requestClient.step1({\n          flow_type: \"EXIST_TENANT\",\n          id_number: this.state.id_number,\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n          birth_date: \"19/01/1980\"\n          /* ,\n          \"landlord_phone\": this.props.user.phone,\n          \"email\": \"template@template.com\" */\n\n        }, this.props.user.auth.session_token).then(data => {\n          data.data.showModal = false;\n          this.props.onSetUserData(data.data);\n          this.props.onSetStepper({\n            activeStep: 2,\n            step1: {\n              edit: true\n            }\n          });\n          Router.push(\"/personal-info\", \"/personal-info/2\", {\n            shallow: true\n          });\n        }).catch(error => {\n          if (get(error, \"response.data.errorCode\") === \"INVALID_ID\") {\n            this.setState({\n              id_numberValidate: {\n                error: \"*ת.ז לא תקינה\"\n              }\n            });\n          }\n\n          this.props.onSetUserData({\n            showModal: false\n          });\n\n          if (get(error, \"response.data.errorCode\") === \"UNAUTHORIZED\") {\n            this.props.onLogout();\n            Router.push(\"/\");\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleChangeState\", (e, value, type) => {\n      e.preventDefault();\n      this.setState({\n        [type]: value\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.nameInput.focus();\n  }\n\n  render() {\n    const {\n      activeStep\n    } = this.props.stepper;\n    return __jsx(Fragment, null, __jsx(\"div\", {\n      className: cn({\n        \"personal-info-section\": true,\n        \"personal-info-section-1\": true,\n        \"personal-info-section-active\": activeStep === STEPPER_STEP1\n      })\n    }, __jsx(\"form\", {\n      className: \"personal-info-form\",\n      id: \"personal-info-form\",\n      onSubmit: this.onSubmit\n    }, __jsx(\"div\", {\n      className: \"personal-info-form-container form-container\"\n    }, __jsx(\"p\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-first-name\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.first_name && this.state.first_name.length > 0,\n        \"input-error\": this.state.first_nameValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"text\",\n      id: \"input-personal-first-name\",\n      ref: input => {\n        this.nameInput = input;\n      },\n      placeholder: \"\\xA0\",\n      onChange: e => this.handleChangeState(e, e.target.value, \"first_name\"),\n      value: this.state.first_name ? this.state.first_name : \"\"\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"*\\u05E9\\u05DD \\u05E4\\u05E8\\u05D8\\u05D9\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.first_nameValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"*\\u05E9\\u05DD \\u05DC\\u05D0 \\u05E0\\u05DB\\u05D5\\u05DF\"))), __jsx(\"p\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-last-name\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.last_name && this.state.last_name.length > 0,\n        \"input-error\": this.state.last_nameValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"text\",\n      id: \"input-personal-info-last-name\",\n      ref: input => {\n        this.nameInput = input;\n      },\n      placeholder: \"\\xA0\",\n      onChange: e => this.handleChangeState(e, e.target.value, \"last_name\"),\n      value: this.state.last_name ? this.state.last_name : \"\"\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"*\\u05E9\\u05DD \\u05DE\\u05E9\\u05E4\\u05D7\\u05D4\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.last_nameValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"\\u05E9\\u05DD \\u05DC\\u05D0 \\u05E0\\u05DB\\u05D5\\u05DF\"))), __jsx(\"p\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-id-number\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.id_number && this.state.id_number.length > 0,\n        \"input-error\": this.state.id_numberValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"number\",\n      id: \"input-personal-info-id-number\",\n      ref: input => {\n        this.nameInput = input;\n      },\n      placeholder: \"\\xA0\",\n      onChange: e => this.handleChangeState(e, e.target.value, \"id_number\"),\n      value: this.state.id_number ? this.state.id_number : \"\"\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"*\\u05DE\\u05E1\\u05E4\\u05E8 \\u05EA.\\u05D6\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.id_numberValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"*\\u05EA.\\u05D6 \\u05DC\\u05D0 \\u05EA\\u05E7\\u05D9\\u05E0\\u05D4\"))), __jsx(\"p\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-personal-info-phone-number\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.phone && this.state.phone.length > 0,\n        \"input-error\": this.state.phoneValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"tel\",\n      dir: \"auto\",\n      style: {\n        textAlign: \"end\"\n      },\n      id: \"input-personal-info-phone-number\",\n      ref: input => {\n        this.nameInput = input;\n      },\n      placeholder: \"\\xA0\",\n      onChange: e => this.handleChangeState(e, e.target.value, \"phone\"),\n      value: this.state.phone ? this.state.phone : \"\"\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"*\\u05DE\\u05E1\\u05E4\\u05E8 \\u05D8\\u05DC\\u05E4\\u05D5\\u05DF\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.phoneValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"personal-info-input-error span-error\"\n    }, \"*\\u05DE\\u05E1\\u05E4\\u05E8 \\u05D8\\u05DC\\u05E4\\u05D5\\u05DF\")))), __jsx(\"div\", {\n      className: \"btn-block\"\n    }, __jsx(\"input\", {\n      className: \"input-submit btn-blue btn-small btn-bold\",\n      id: \"personal-info-submit\",\n      type: \"submit\",\n      value: \"\\u05D4\\u05DE\\u05E9\\u05DA\"\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    stepper: state.forms.stepper\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetStepper: action => {\n      dispatch(stepper(action));\n    },\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    },\n    onLogout: action => {\n      dispatch(logout(action));\n    }\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(PersonalInfoStep1);\nexport default withConnect;","map":null,"metadata":{},"sourceType":"module"}