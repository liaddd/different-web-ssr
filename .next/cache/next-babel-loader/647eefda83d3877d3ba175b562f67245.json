{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport cn from \"classnames\";\nimport { get } from 'lodash';\nimport Router from 'next/router';\nimport validator from \"../../utils/validate\";\nimport requestClient from \"../../utils/requestClient/requests\";\nimport UserActions from \"../../actions/users/users.actions\";\nimport { connect } from \"react-redux\";\nimport ModalLoader from \"./../../components/Modal/ModalLoader\";\nconst DEFAULT_ERROR = \" אחד או יותר מהפרטים אינו נכון \";\n\nclass CardBlock extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      formValid: false,\n      cardNumber: null,\n      cardExpireDate: null,\n      cvv: null,\n      name: null,\n      idNumber: null,\n      email: null,\n      errorMessage: '',\n      clickOnCheckbox: false,\n      clickOnCheckbox2: false,\n      cardNumberValidate: {\n        error: void 0\n      },\n      cardExpireDateValidate: {\n        error: void 0\n      },\n      cvvValidate: {\n        error: void 0\n      },\n      nameValidate: {\n        error: void 0\n      },\n      idNumberValidate: {\n        error: void 0\n      },\n      emailValidate: {\n        error: void 0\n      }\n    });\n\n    _defineProperty(this, \"onValidateForm\", () => {\n      let cardNumber = validator.validate.validate(validator.constants.CreditCardRegex, this.state.cardNumber, DEFAULT_ERROR);\n\n      if (cardNumber && cardNumber.error) {\n        this.setState({\n          cardNumberValidate: {\n            error: cardNumber.error\n          }\n        });\n      } else {\n        this.setState({\n          cardNumberValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let cardExpireDate = validator.validate.validate(validator.constants.InputStringRegex, this.state.cardExpireDate, DEFAULT_ERROR);\n\n      if (cardExpireDate && cardExpireDate.error) {\n        this.setState({\n          cardExpireDateValidate: {\n            error: cardExpireDate.error\n          }\n        });\n      } else {\n        this.setState({\n          cardExpireDateValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let cvv = validator.validate.validate(validator.constants.InputStringRegex, this.state.cvv, DEFAULT_ERROR);\n\n      if (cvv && cvv.error) {\n        this.setState({\n          cvvValidate: {\n            error: cvv.error\n          }\n        });\n      } else {\n        this.setState({\n          cvvValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let name = validator.validate.validate(validator.constants.InputStringRegex, this.state.name, DEFAULT_ERROR);\n\n      if (name && name.error) {\n        this.setState({\n          nameValidate: {\n            error: name.error\n          }\n        });\n      } else {\n        this.setState({\n          nameValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let idNumber = validator.validate.validate(validator.constants.IdNumberRegex, this.state.idNumber, DEFAULT_ERROR);\n\n      if (idNumber && idNumber.error) {\n        this.setState({\n          idNumberValidate: {\n            error: idNumber.error\n          }\n        });\n      } else {\n        this.setState({\n          idNumberValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      let email = validator.validate.validate(validator.constants.EmailRegex, this.state.email, DEFAULT_ERROR);\n\n      if (email && email.error) {\n        this.setState({\n          emailValidate: {\n            error: email.error\n          }\n        });\n      } else {\n        this.setState({\n          emailValidate: {\n            error: void 0\n          }\n        });\n      }\n\n      return cardNumber.valid && cardExpireDate.valid && cvv.valid && name.valid && idNumber.valid && email.valid;\n    });\n\n    _defineProperty(this, \"onSubmit\", e => {\n      e.preventDefault();\n\n      if (this.onValidateForm() && this.state.clickOnCheckbox) {\n        this.props.onSetUserData({\n          formValid: false,\n          showModal: true\n        });\n        const splitDate = this.state.cardExpireDate.split('/');\n        requestClient.cardChecker({\n          \"CardNumber\": this.state.cardNumber,\n          \"ExpirationMonth\": splitDate[0],\n          \"ExpirationYear\": splitDate[1],\n          \"CVV\": this.state.cvv,\n          \"CitizenID\": this.state.idNumber,\n          \"Credentials\": {\n            \"CompanyID\": `${process.env.REACT_APP_CARD_COMPANY_NAME_ID}`,\n            \"APIPublicKey\": `${process.env.REACT_APP_CARD_COMPANY_API_PUBLIK_KEY}`\n          },\n          \"ResponseLanguage\": \"he\"\n        }, this.props.user.auth.session_token).then(data => {\n          if (data.data.UserErrorMessage) {\n            this.setState({\n              errorMessage: data.data.UserErrorMessage\n            });\n          }\n\n          return data;\n        }).then(data => {\n          const token = data.data.Data.SingleUseToken;\n          const prepareData = {\n            \"property_id\": this.props.user.id,\n            \"tenant_id\": get(this.props, 'user.selected_tenant_user.exist_tenant_id', ''),\n            \"is_agent\": false,\n            \"card\": {\n              \"user_id\": this.props.user.id,\n              \"token\": token,\n              \"card_holder_id\": this.state.idNumber,\n              \"card_holder_name\": this.state.name,\n              \"invoice_email\": this.state.email\n            }\n          };\n          requestClient.guaranteeAgreement(prepareData, this.props.user.auth.session_token).then(data => {\n            data.data.showModal = false;\n            this.props.onSetUserData(data.data);\n            Router.push('/info');\n          }).catch(error => {\n            let errorM = \"אחד או יותר מפרטי האשראי שגוי\";\n\n            if (get(error, 'response.data.errorMessage') !== 'tenant_id key is required') {\n              errorM = get(error, 'response.data.errorMessage', '');\n            }\n\n            this.setState({\n              errorMessage: errorM\n            });\n            this.props.onSetUserData({\n              showModal: false\n            });\n          });\n        }).catch(error => {\n          this.setState({\n            errorMessage: \"אחד או יותר מפרטי האשראי שגוי\"\n          });\n          console.error(error);\n          this.props.onSetUserData({\n            showModal: false\n          });\n        });\n      } else {\n        this.setState({\n          formValid: false\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Fragment, null, __jsx(\"section\", {\n      className: \"card-block\"\n    }, __jsx(\"div\", {\n      className: \"card-block-form\"\n    }, __jsx(\"form\", {\n      className: \"card-form\",\n      id: \"card-form\",\n      onSubmit: e => this.onSubmit(e),\n      noValidate: true\n    }, __jsx(\"div\", {\n      className: \"card-content-column-top\"\n    }, __jsx(\"header\", {\n      className: \"card-header\"\n    }, __jsx(\"h2\", {\n      className: \"card-header-title\"\n    }, \"\\u05D0\\u05DE\\u05E6\\u05E2\\u05D9 \\u05EA\\u05E9\\u05DC\\u05D5\\u05DD\")), __jsx(\"div\", {\n      className: \"card-form-container form-container\"\n    }, __jsx(\"p\", {\n      className: \"input-block\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-card-card-number\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.cardNumber && this.state.cardNumber.length > 0,\n        \"input-error\": this.state.cardNumberValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"tel\",\n      id: \"input-card-card-number\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          cardNumber: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05DE\\u05E1\\u05E4\\u05E8 \\u05DB\\u05E8\\u05D8\\u05D9\\u05E1 \\u05D0\\u05E9\\u05E8\\u05D0\\u05D9\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.cardNumberValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"\\u05DE\\u05E1\\u05E4\\u05E8 \\u05DB\\u05E8\\u05D8\\u05D9\\u05E1 \\u05D0\\u05E9\\u05E8\\u05D0\\u05D9\"))), __jsx(\"p\", {\n      className: \"input-block-row\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-card-validity\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.cardExpireDate && this.state.cardExpireDate.length > 0,\n        \"input-error\": this.state.cardExpireDateValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"text\",\n      id: \"input-card-validity\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          cardExpireDate: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05EA\\u05D5\\u05E7\\u05E3 \\u05D4\\u05DB\\u05E8\\u05D8\\u05D9\\u05E1\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.cardExpireDateValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"require\"))), __jsx(\"p\", {\n      className: \"input-block-row cvv-key-block\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-cvv\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.cvv && this.state.cvv.length > 0,\n        \"input-error\": this.state.cvvValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-email input-text-grey cvv-key-input\",\n      type: \"password\",\n      id: \"input-cvv\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          cvv: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"CVV\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.cvvValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"require\"))), __jsx(\"p\", {\n      className: \"input-block\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-card-name\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.name && this.state.name.length > 0,\n        \"input-error\": this.state.nameValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"text\",\n      id: \"input-card-name\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          name: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05E9\\u05DD \\u05D1\\u05E2\\u05DC \\u05D4\\u05DB\\u05E8\\u05D8\\u05D9\\u05E1\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.nameValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"require\"))), __jsx(\"p\", {\n      className: \"input-block\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-card-id-number\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.idNumber && this.state.idNumber.length > 0,\n        \"input-error\": this.state.idNumberValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"number\",\n      id: \"input-card-id-number\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          idNumber: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05DE\\u05E1\\u05E4\\u05E8 \\u05EA.\\u05D6 \\u05E9\\u05DC \\u05D1\\u05E2\\u05DC \\u05D4\\u05DB\\u05E8\\u05D8\\u05D9\\u05E1\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.idNumberValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"*\\u05EA.\\u05D6 \\u05DC\\u05D0 \\u05EA\\u05E7\\u05D9\\u05E0\\u05D4\"))), __jsx(\"p\", {\n      className: \"input-block\"\n    }, __jsx(\"label\", {\n      htmlFor: \"input-card-email\",\n      className: cn({\n        \"input-label\": true,\n        \"input-not-empty\": this.state.email && this.state.email.length > 0,\n        \"input-error\": this.state.emailValidate.error !== void 0\n      })\n    }, __jsx(\"input\", {\n      className: \"input-text input-text-grey\",\n      type: \"email\",\n      id: \"input-card-email\",\n      placeholder: \"\\xA0\",\n      onChange: e => {\n        this.setState({\n          email: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      className: \"input-label-span\"\n    }, \"\\u05D3\\u05D5\\u05D0\\u05E8 \\u05D0\\u05DC\\u05E7\\u05D8\\u05E8\\u05D5\\u05E0\\u05D9 \\u05DC\\u05E9\\u05DC\\u05D9\\u05D7\\u05EA \\u05D7\\u05E9\\u05D1\\u05D5\\u05E0\\u05D9\\u05EA\"), __jsx(\"span\", {\n      className: \"input-border\"\n    }), this.state.emailValidate.error !== void 0 && __jsx(\"span\", {\n      className: \"card-input-error span-error\"\n    }, \"require\")))), __jsx(\"div\", {\n      className: \"card-block-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"card-checkbox input-checkbox\",\n      id: \"card-checkbox\",\n      type: \"checkbox\",\n      checked: this.state.clickOnCheckbox,\n      onChange: () => this.setState({\n        clickOnCheckbox: !this.state.clickOnCheckbox\n      })\n    }), __jsx(\"label\", {\n      className: \"card-checkbox-label\",\n      htmlFor: \"card-checkbox\"\n    }, \"\\u05E7\\u05E8\\u05D0\\u05EA\\u05D9 \\u05D5\\u05D0\\u05E0\\u05D9 \\u05DE\\u05D0\\u05E9\\u05E8\\u05EA \\u05D0\\u05EA\", __jsx(\"a\", {\n      href: \"https://diffe-rent.s3-eu-west-1.amazonaws.com/%D7%91%D7%98%D7%97%D7%95%D7%9F+%D7%91%D7%A9%D7%9B%D7%99%D7%A8%D7%95%D7%AA+-+DiffeRent.pdf\",\n      target: \"_blank\"\n    }, \" \\u05EA\\u05E0\\u05D0\\u05D9 \\u05E9\\u05D9\\u05E8\\u05D5\\u05EA \\u05D1\\u05D8\\u05D7\\u05D5\\u05DF \\u05D1\\u05E9\\u05DB\\u05D9\\u05E8\\u05D5\\u05EA \"))), __jsx(\"br\", null), __jsx(\"div\", {\n      className: \"card-block-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"card-checkbox input-checkbox\",\n      id: \"card-checkbox\",\n      type: \"checkbox\",\n      checked: this.state.clickOnCheckbox2,\n      onChange: () => this.setState({\n        clickOnCheckbox2: !this.state.clickOnCheckbox2\n      })\n    }), __jsx(\"label\", {\n      className: \"card-checkbox-label\",\n      htmlFor: \"card-checkbox\"\n    }, \"\\u05D0\\u05E0\\u05D9 \\u05DE\\u05D0\\u05E9\\u05E8 \\u05E7\\u05D1\\u05DC\\u05EA \\u05D3\\u05D9\\u05D5\\u05D5\\u05E8 \\u05D5/\\u05D0\\u05D5 \\u05D7\\u05D5\\u05DE\\u05E8 \\u05E4\\u05E8\\u05E1\\u05D5\\u05DE\\u05D9\"))), __jsx(\"br\", null), __jsx(\"p\", {\n      style: {\n        color: \"#ff776f\"\n      }\n    }, this.state.errorMessage), __jsx(\"div\", {\n      className: \"card-footer card-content-column-bottom\"\n    }, __jsx(\"div\", {\n      className: \"btn-block\"\n    }, __jsx(\"input\", {\n      className: cn({\n        \"input-submit btn-small\": true,\n        \" btn-blue\": this.state.clickOnCheckbox,\n        \"btn-grey\": !this.state.clickOnCheckbox\n      }),\n      id: \"card-submit\",\n      type: \"submit\",\n      value: \"\\u05D0\\u05D9\\u05E9\\u05D5\\u05E8\"\n    })))))), __jsx(ModalLoader, {\n      show: this.props.user.showModal\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    }\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(CardBlock);\nexport default withConnect;","map":null,"metadata":{},"sourceType":"module"}