{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport cn from \"classnames\";\nimport { get } from \"lodash\";\nimport \"./../Authorization.scss\";\nimport Api from \"../../../utils/requestClient/requests\";\nimport UserActions from \"../../../actions/users/users.actions\";\nimport Router from \"next/router\";\nimport { setCookie } from \"../../../utils/cookie\";\n\nclass AuthorizationStep2 extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      seconds: 59,\n      error: void 0\n    });\n\n    _defineProperty(this, \"onSubmitForm\", e => {\n      e.preventDefault();\n\n      if (this.state.seconds === 0) {\n        return;\n      }\n\n      const {\n        code1,\n        code2,\n        code3,\n        code4\n      } = this;\n      const code = `${code1.value}${code2.value}${code3.value}${code4.value}`;\n      const requestData = {\n        phone: this.props.user.phone,\n        code,\n        fcm_token: \"someKey\"\n      };\n      this.stopTimer();\n      this.props.onSetUserData({\n        showModal: true\n      });\n      Api.auth(requestData).then(data => {\n        data.data.showModal = false;\n        setCookie(\"global_token\", data.data.auth.global_token);\n        this.props.onSetUserData(data.data);\n\n        if (this.props.user.showStepsAfterLogin) {\n          Router.push(\"/personal-info\");\n        } else {\n          Router.push(\"/\");\n        }\n      }).catch(err => {\n        this.code1 = React.createRef();\n        this.code2 = React.createRef();\n        this.code3 = React.createRef();\n        this.code4 = React.createRef();\n\n        if (get(err, \"response.data.errorCode\") === \"BLOCKED_USER\") {\n          this.props.hendleBlockUser();\n        }\n\n        this.props.onSetUserData({\n          showModal: false\n        });\n        this.setState({\n          error: err.toString()\n        });\n      });\n    });\n\n    _defineProperty(this, \"onChange\", e => {\n      if (e.target.value) {\n        this.onSubmitForm(e);\n        this.code4.focus();\n      }\n    });\n\n    this.code1 = React.createRef();\n    this.code2 = React.createRef();\n    this.code3 = React.createRef();\n    this.code4 = React.createRef();\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  } // startTimer\n\n\n  startTimer() {\n    this.timer = setInterval(this.countDown, 1000);\n  } // stopTimer\n\n\n  stopTimer() {\n    if (this.timer) clearInterval(this.timer);\n  } // countDown\n\n\n  countDown() {\n    const {\n      onSetUserData\n    } = this.props; // if (this.state.seconds === 0) {\n    //     onSetUserData({successMessage: null})\n    // }\n    // Remove one second, set state so a re-render happens.\n\n    let seconds = this.state.seconds - 1;\n\n    if (seconds !== 0) {\n      this.setState({\n        seconds: seconds\n      });\n    } else {\n      this.stopTimer();\n      this.setState(prevState => {\n        return {\n          seconds: 0\n        };\n      });\n      onSetUserData({\n        successMessage: null\n      });\n    }\n  } // componentWillUnmount\n\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  get checkCode() {\n    const {\n      code1,\n      code2,\n      code3,\n      code4\n    } = this;\n    return code1.value && code2.value && code3.value && code4.value;\n  } // onSubmitForm is action to submit form\n\n\n  render() {\n    return __jsx(Fragment, null, __jsx(\"div\", {\n      className: \"authorization-block\"\n    }, __jsx(\"div\", {\n      className: \"authorization-block-form\"\n    }, __jsx(\"div\", {\n      className: \"authorization-block-title\"\n    }, __jsx(\"div\", {\n      className: \"authorization-title\"\n    }, \"\\u05D4\\u05D6\\u05DF \\u05D0\\u05EA \\u05D4\\u05E7\\u05D5\\u05D3 \\u05E9\\u05E7\\u05D9\\u05D1\\u05DC\\u05EA\"), __jsx(\"div\", {\n      className: \"authorization-subtitle\"\n    }, \"\\u05D1SMS \\u05DC\\u05DE\\u05E1\\u05E4\\u05E8 \", __jsx(\"span\", {\n      dir: \"ltr\"\n    }, this.props.user.phone))), __jsx(\"form\", {\n      className: \"authorization-form\",\n      id: \"authorization-form\",\n      onSubmit: e => this.onSubmitForm(e),\n      noValidate: true\n    }, __jsx(\"div\", {\n      className: \"authorization-block-input\",\n      dir: \"ltr\"\n    }, __jsx(\"input\", {\n      className: \"authorization-input-number input-number authorization-input\",\n      type: \"number\",\n      autoFocus: true,\n      ref: node => this.code1 = node,\n      onChange: () => {\n        this.code2.focus();\n      }\n    }), __jsx(\"input\", {\n      className: \"authorization-input-number input-number authorization-input\",\n      type: \"number\",\n      ref: node => this.code2 = node,\n      onChange: () => {\n        this.code3.focus();\n      }\n    }), __jsx(\"input\", {\n      className: \"authorization-input-number input-number authorization-input\",\n      type: \"number\",\n      ref: node => this.code3 = node,\n      onChange: () => {\n        this.code4.focus();\n      }\n    }), __jsx(\"input\", {\n      className: \"authorization-input-number input-number authorization-input\",\n      type: \"number\",\n      ref: node => this.code4 = node,\n      onChange: e => this.onChange(e)\n    }), this.state.error ? __jsx(\"span\", {\n      className: \"authorization-input-error\"\n    }, \"\\u05E7\\u05D5\\u05D3 \\u05E9\\u05D2\\u05D5\\u05D9\") : null), __jsx(\"div\", {\n      className: \"authorization-block-description\"\n    }, \"\\u05DC\\u05D0 \\u05D4\\u05D2\\u05D9\\u05E2? \\u05EA\\u05D5\\u05DB\\u05DC \\u05DC\\u05E9\\u05DC\\u05D5\\u05D7 \\u05E9\\u05D5\\u05D1 \\u05D1\\u05D7\\u05DC\\u05D5\\u05E3 \\u05D3\\u05E7\\u05D4\"), __jsx(\"div\", {\n      className: \"authorization-block-submit\"\n    }, __jsx(\"input\", {\n      className: cn({\n        \"authorization-timer-submit\": true,\n        \"input-submit\": true,\n        \"btn-grey\": this.state.seconds === 0,\n        \"btn-blue\": this.state.seconds !== 0,\n        \"btn-normal\": true,\n        \"btn-bold\": true\n      }),\n      id: \"authorization-timer-submit\",\n      type: \"submit\",\n      value: this.checkCode ? \"שליחה\" : `00:${this.state.seconds > 9 ? this.state.seconds : `0${this.state.seconds}`}`\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.user\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorizationStep2);","map":null,"metadata":{},"sourceType":"module"}