{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./../Authorization.scss\";\nimport UserActions from \"../../../actions/users/users.actions\";\nimport Validator from \"./../../../utils/validate\";\nimport Api from \"./../../../utils/requestClient/requests\";\nimport { get } from \"lodash\";\n\nclass AuthorizationStep1 extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      asyncError: {\n        errorText: \"undefined request error\",\n        errorState: false\n      },\n      phone: {\n        // please it will translate to hebrew if it need\n        errorText: Validator.constants.PhoneErrorText,\n        errorState: false\n      },\n      checker: {\n        // please it will translate to hebrew if it need\n        errorText: Validator.constants.CheckboxErrorText,\n        errorState: false\n      }\n    });\n\n    _defineProperty(this, \"onSubmitForm\", e => {\n      e.preventDefault();\n      this.validatePhone();\n      this.validateChecker();\n\n      if (this.validatePhone() && this.validateChecker()) {\n        let phoneFormat = this.authorizationInput.value;\n        phoneFormat = phoneFormat[0] === \"0\" ? phoneFormat.replace(/^0/, \"+972\") : phoneFormat;\n        const requestData = {\n          phone: phoneFormat,\n          device_type: \"web\",\n          device_name: \"web\",\n          os_version: \"1\",\n          is_agent: false\n        };\n        this.props.onSetUserData({\n          showModal: true\n        });\n        Api.login(requestData).then(data => {\n          if (this.state.asyncError.errorState) {\n            this.setState(prevState => {\n              return _objectSpread({}, prevState, _objectSpread({}, prevState.asyncError, {\n                asyncError: {\n                  errorText: \"\",\n                  errorState: false\n                }\n              }));\n            });\n          }\n\n          data.data.phone = phoneFormat;\n          data.data.showModal = false;\n          this.props.onSetUserData(data.data);\n        }).catch(err => {\n          this.props.onSetUserData({\n            showModal: false\n          });\n\n          if (get(err, \"response.data.errorCode\") === \"BLOCKED_USER\") {\n            this.props.hendleBlockUser();\n          }\n\n          this.setState(prevState => {\n            return _objectSpread({}, prevState, _objectSpread({}, prevState.asyncError, {\n              asyncError: {\n                errorText: \"מספר הטלפון שהוזן אינו תקין\",\n                errorState: true\n              }\n            }));\n          });\n        });\n      }\n    });\n\n    this.authorizationInput = React.createRef();\n    this.authorizationChecker = React.createRef();\n  }\n\n  // validatePhone is short validate callback function\n  validatePhone() {\n    const {\n      authorizationInput\n    } = this;\n    const inputValidation = Validator.validate.validate(Validator.constants.IsraelPhoneNumberRegex, authorizationInput.value, Validator.constants.PhoneErrorValidation);\n\n    if (inputValidation.error) {\n      this.setState((prevState, props) => {\n        return _objectSpread({}, prevState, _objectSpread({}, prevState.phone, {\n          phone: {\n            errorText: inputValidation.error,\n            errorState: true\n          }\n        }));\n      });\n    } else {\n      this.setState(prevState => {\n        return _objectSpread({}, prevState, _objectSpread({}, prevState.phone, {\n          phone: {\n            errorText: inputValidation.error,\n            errorState: false\n          }\n        }));\n      });\n    }\n\n    return inputValidation.valid;\n  } // validateChecker is short validate callback function\n\n\n  validateChecker() {\n    const {\n      authorizationChecker\n    } = this;\n    const inputValidation = Validator.validate.validate(Validator.constants.InputCheckerRegex, authorizationChecker.checked, Validator.constants.CheckboxErrorText);\n\n    if (inputValidation.error) {\n      this.setState((prevState, props) => {\n        return _objectSpread({}, prevState, _objectSpread({}, prevState.checker, {\n          checker: {\n            errorText: inputValidation.error,\n            errorState: true\n          }\n        }));\n      });\n    } else {\n      this.setState(prevState => {\n        return _objectSpread({}, prevState, _objectSpread({}, prevState.checker, {\n          checker: {\n            errorText: inputValidation.error,\n            errorState: false\n          }\n        }));\n      });\n    }\n\n    return inputValidation.valid;\n  } // onSubmitForm is action to submit form\n\n\n  // render\n  render() {\n    return __jsx(Fragment, null, __jsx(\"div\", {\n      className: \"authorization-block\"\n    }, __jsx(\"div\", {\n      className: \"authorization-block-form\"\n    }, __jsx(\"div\", {\n      className: \"authorization-block-title\"\n    }, __jsx(\"div\", {\n      className: \"authorization-title\"\n    }, \"\\u05DE\\u05E1\\u05E4\\u05E8 \\u05D8\\u05DC\\u05E4\\u05D5\\u05DF \\u05DC\\u05D4\\u05EA\\u05D7\\u05D1\\u05E8\\u05D5\\u05EA\")), __jsx(\"form\", {\n      className: \"authorization-form\",\n      id: \"authorization-form\",\n      onSubmit: e => this.onSubmitForm(e),\n      noValidate: true\n    }, __jsx(\"div\", {\n      className: \"authorization-block-input\"\n    }, __jsx(\"input\", {\n      className: \"authorization-input-tel input-tel authorization-input\",\n      type: \"tel\",\n      autoFocus: true,\n      ref: node => this.authorizationInput = node,\n      dir: \"ltr\"\n    }), this.state.phone.errorState ? __jsx(\"span\", {\n      className: \"authorization-input-error\"\n    }, this.state.phone.errorText) : null, this.state.asyncError.errorState ? __jsx(\"span\", {\n      className: \"authorization-input-error\"\n    }, this.state.asyncError.errorText) : null, this.state.checker.errorState ? __jsx(\"span\", {\n      className: \"authorization-input-error\"\n    }, this.state.checker.errorText) : null), __jsx(\"div\", {\n      className: \"authorization-block-description\"\n    }, \"\\u05D0\\u05E0\\u05D5 \\u05E0\\u05E9\\u05DC\\u05D7 \\u05D0\\u05DC\\u05D9\\u05D9\\u05DA \\u05E7\\u05D5\\u05D3 \\u05DC\\u05D0\\u05D9\\u05E9\\u05D5\\u05E8 \\u05DE\\u05E1\\u05E4\\u05E8 \\u05D4\\u05D8\\u05DC\\u05E4\\u05D5\\u05DF\"), __jsx(\"div\", {\n      className: \"authorization-block-checkbox\"\n    }, __jsx(\"input\", {\n      className: \"authorization-input-checkbox input-checkbox\",\n      id: \"authorization-checkbox\",\n      type: \"checkbox\",\n      ref: node => this.authorizationChecker = node\n    }), __jsx(\"label\", {\n      className: \"authorization-label-checkbox\",\n      htmlFor: \"authorization-checkbox\"\n    }, \"\\u05D0\\u05D9\\u05E9\\u05E8\\u05EA\\u05D9 \\u05D0\\u05EA\\xA0\", __jsx(\"a\", {\n      href: \"https://diffe-rent.s3-eu-west-1.amazonaws.com/%D7%AA%D7%A7%D7%A0%D7%95%D7%9F-+DiffeRent.pdf\",\n      target: \"_blank\"\n    }, \"\\u05D4\\u05EA\\u05E7\\u05E0\\u05D5\\u05DF\"))), __jsx(\"div\", {\n      className: \"authorization-block-submit\"\n    }, __jsx(\"input\", {\n      className: \"authorization-submit input-submit btn-blue btn-large\",\n      id: \"authorization-submit\",\n      type: \"submit\",\n      value: \"\\u05E9\\u05DC\\u05D9\\u05D7\\u05D4\"\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPhone: state.user.phone\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetUserData: action => {\n      dispatch(UserActions.setUserData(action));\n    }\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(AuthorizationStep1);\nexport default withConnect;","map":null,"metadata":{},"sourceType":"module"}