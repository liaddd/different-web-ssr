{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport Actions from \"./../actions/users/\";\nimport { RESET_STORE, SET_USER_TOKEN } from \"./../actions/common/common.actions.constants\";\nconst initialState = {\n  contracts: [],\n  auth: false,\n  phone: null,\n  successMessage: null,\n  new_user: false,\n  showModal: false,\n  first_name: null,\n  last_name: null,\n  birth_date: \"1970-01-01\",\n  id_number: null,\n  email: null,\n  about: null,\n  profession: null,\n  city: null,\n  address: null,\n  street: null,\n  street_no: null,\n  apt_no: null,\n  no_of_kids: null,\n  profile_image: null,\n  created_at: void 0,\n  updated_at: void 0,\n  image_id: null,\n  image_delete_token: null,\n  flow_type: null,\n  landlord_user_id: null,\n  checked_users: [{\n    first_name: null,\n    last_name: null,\n    id_number: null,\n    phone: null,\n    property_id: null,\n    first_nameValidate: {\n      error: void 0\n    },\n    last_nameValidate: {\n      error: void 0\n    },\n    id_numberValidate: {\n      error: void 0\n    },\n    phoneValidate: {\n      error: void 0\n    }\n  }],\n  creditCard: {\n    token: void 0\n  },\n  selected_tenant_user: null,\n  buttonsCount: 1\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case Actions.constants.SET_USER_TOKEN:\n      {\n        return _objectSpread({}, state, {\n          auth: {\n            global_token: action.payload.global_token\n          }\n        });\n      }\n\n    case RESET_STORE:\n      {\n        return initialState;\n      }\n\n    case Actions.constants.SET_AUTHENTICATION:\n      return _objectSpread({}, state, action.payload);\n\n    case Actions.constants.SET_USER_DATA:\n      return _objectSpread({}, state, action.payload.data);\n\n    case Actions.constants.SET_CONTRACTS_DATA:\n      return _objectSpread({}, state, {\n        contracts: [...action.payload]\n      });\n\n    case Actions.constants.SET_SUMMARY_BUTTONS_COUNT:\n      let checked_users = state.checked_users;\n      const buttonsCount = action.payload.buttonsCount;\n\n      if (checked_users.length >= buttonsCount) {\n        checked_users.length = buttonsCount;\n      } else if (checked_users.length < buttonsCount) {\n        for (let i = buttonsCount; i >= 0; i--) {\n          if (checked_users.length < buttonsCount) {\n            checked_users.push({\n              first_name: null,\n              last_name: null,\n              id_number: null,\n              phone: null,\n              property_id: null,\n              first_nameValidate: {\n                error: void 0\n              },\n              last_nameValidate: {\n                error: void 0\n              },\n              id_numberValidate: {\n                error: void 0\n              },\n              phoneValidate: {\n                error: void 0\n              }\n            });\n          }\n        }\n      }\n\n      state.checked_users = checked_users;\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}